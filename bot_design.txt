from config.settings import TZ_TA 

資料夾folder 路徑path

JSON後
A
所有channel command 為 關鍵字


D
    "code_damage_tiers":{
      "prob": 0.12,
      "name": "優越代碼傷害增加",
      "tier": {
      "1": {"9.54%": 0.12}, "2": {"10.94%": 0.12}, "3": {"12.34%": 0.12},
      "4": {"13.75%": 0.12}, "5": {"15.15%": 0.12}, "6": {"16.55%": 0.07},
      "7": {"17.95%": 0.07}, "8": {"19.35%": 0.07}, "9": {"20.75%": 0.07},
      "10": {"22.15%": 0.07}, "11": {"23.56": 0.01}, "12": {"24.96%": 0.01},
      "13": {"26.36%": 0.01}, "14": {"27.76%": 0.01}, "15": {"29.16%": 0.01}
      }
    },

channel 用 in

######################## 資料帶入 ####################################################

一層
import json
import os
json_path = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', 'config', 'settings.json')
)
with open(json_path, 'r') as f:
  json_data = json.load(f)
  AAAAA = json_data['AAAAA']

二層
import json
import os
json_path = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'settings.json')
)
with open(json_path, 'r') as f:
  json_data = json.load(f)
  AAAAA = json_data['AAAAA']

############################斜線指令+伺服器##########################
json 代MAIN
@app_commands.guilds(discord.Object(id=MAIN["guild_id"]))
##########################################################################################
###################### 函式 ######################
-開頭先判斷是否enable
  if not ["enable"]:
    return
-接著判斷第二條件 如
  # 若非目標頻道則不處理
  if 條件 != 條件["channel"]:
    return
###################### cogs ######################
使用者
ctx.author
interaction.user
| 功能   | prefix (`ctx`)     | slash (`interaction`)                       |
| ---- | ------------------ | ------------------------------------------- |
| 使用者  | `ctx.author`       | `interaction.user`                          |
| 頻道   | `ctx.channel`      | `interaction.channel`                       |
| 伺服器  | `ctx.guild`        | `interaction.guild`                         |
| 回覆訊息 | `await ctx.send()` | `await interaction.response.send_message()` |

###################### prefix ######################
-冷卻使用
@commands.cooldown(rate= , per= , type= )
type=commands.BucketType.member以使用者為單位冷卻
type=commands.BucketType.guild以伺服器為單位冷卻

###################### slash ######################
try:
  ?await interaction.response.defer(ephemeral=True)
except Exception as e:
  if not interaction.response.is_done():
    await interaction.response.send_message(f"Error", ephemeral=True)
    print(f"AAAAAA error {e}")
  else:
    await interaction.followup.send(f"Error", ephemeral=True)
    print(f"AAAAAA error {e}")


-冷卻使用

個人冷卻:
import discord
from discord.ext import commands
from datetime import datetime, timedelta

class UserCooldownCog(commands.Cog): ###
  def __init__(self, bot): ###
    #self.bot = bot ###
    self.cooldown_seconds = AAAAAAAAAAAA
    self.user_cooldowns = {}

  @commands.slash_command(name="user_cooldown_test", description="個人冷卻測試") ###
  async def user_cooldown_test(self, interaction: discord.Interaction): ###
    now = datetime.utcnow()
    last_time = self.user_cooldowns.get(interaction.user.id)

    if last_time and last_time > now:
      left = (last_time - now).total_seconds()
      await interaction.response.send_message(f"{left:.1f} 秒", ephemeral=True)
      return

    self.user_cooldowns[interaction.user.id] = now + timedelta(seconds=self.cooldown_seconds)

伺服器整個統一冷卻:
import discord
from discord.ext import commands
from datetime import datetime, timedelta

class GuildCooldownCog(commands.Cog): ###
  def __init__(self, bot): ###
    #self.bot = bot ###
    self.cooldown_seconds = 10
    self.guild_cooldowns = {}

  @commands.slash_command(name="guild_cooldown_test", description="伺服器冷卻測試") ###
  async def guild_cooldown_test(self, interaction: discord.Interaction): ###
    now = datetime.utcnow()
    last_time = self.guild_cooldowns.get(interaction.guild.id)

    if last_time and last_time > now:
      left = (last_time - now).total_seconds()
      await interaction.response.send_message(f"{left:.1f} 秒", ephemeral=True)
      return

    self.guild_cooldowns[interaction.guild.id] = now + timedelta(seconds=self.cooldown_seconds)

###################### on_message相關函式 ######################
-創建至/listeners
-載入到/cogs/listeners/on_message
-函式必須有
  # 忽略機器人自己或沒有頻道ID
  if message.author.bot or message.channel is None:
    return
-冷卻使用
全域cooldown_temp = 0 
    global cooldown_temp
    now = time.time()

########################################################

# emoji_map.get(name,name)若在字典為自訂表情不是則傳回原始

###################### 按鈕VIEW ######################
# 只有指令發出者本人能點按鈕，其他人點擊無效
if interaction.user.id != self.author_id:
  await interaction.response.defer(ephemeral=True)
  return

# 如果按鈕已被揭示過，忽略點擊，回覆 deferring 防止錯誤
if self.revealed:
  await interaction.response.defer(ephemeral=True)
  return

# 防連點 點擊後先 disable 所有按鈕
for child in self.parent_view.children:
  if isinstance(child, Button):
    child.disabled = True

# 重新啟用尚未揭示的按鈕，讓玩家繼續點擊
for child in self.parent_view.children:
  if isinstance(child, Button) and not getattr(child, "revealed", False):
    child.disabled = False

########################################################################################
slash 等discord.py v2.6.0後
@app_commands.cooldown(rate= , per=10, type= )
type=app_commands.CooldownType.member
type=app_commands.CooldownType.guild